Thank you for downloading this script.

Please read this file prior to running it!

=====================================================

0. DISCLAIMER

This script was created for home use. It's primarily intended for geeks (like me) that enjoy using the CLI.

Do not use it on servers, business systems or other "critical" devices. It hasn't been tested thoroughly and there might still be some bugs.

To conclude, use it at your own risk. I will not be held accountable for any damage or loss it might cause whatsoever. 

Please let me know if you find any inconsistent information in this document so I can update it.

1. INTRODUCTION

This script file contains various functions that are used for navigating through the file system.

On Mac OS the navigation occurs in three steps when calling the goto function:
- a cd is run in the terminal to the chosen directory
- all existing Finder windows are closed
- a new Finder window is opened to the new location

Hence a synchronization of the current directory in terminal and Finder is obtained.

On the Linux version only the first step is executed as the script runs in CLI-mode only. For more details see section 2.

2. Supported systems

a. Mac OS (OS X)

On Mac OS the "full GUI" mode is supported. This means the script is synchronized with the Finder window. When changing the current directory using the goto function, the Finder window is closed and then re-opened in the new directory. The inverse operation (changing the current directory in terminal when modifying it in Finder) is not supported.

b. Linux

On the Linux version the "CLI" mode is supported. This means the script does not synchronize the current directory of the terminal with the one from the explorer window. The reason for this implementation is that there are several distributions of Linux and the explorer tool might be differ from one to another.

However a GUI mode might be available depending on distribution. For example on OpenSUSE it is possible to run the CLI-only script in a terminal embedded in the Dolphin window. Unlike the Mac OS script version the synchronization is made by the system and not by script.

c. Windows

The Linux script version could also be run in Windows using the a Unix-CLI emulator like Git Bash. However there might be some limitations in functionality. So far I have run a few tests on Windows and the only thing that I noticed is that the script sometimes runs pretty slow. I cannot explain why this happens especially as I only ran it in CLI mode using Git Bash. The reason might be that it is not being run on a native Bash but on an emulator. Neither on Linux nor on OS X did I notice any visible slowness.

3. INSTALLATION

I. On Mac OS:

If you wish to use the goto script without the move, copy and paste functionality just clone from the repo. Then ensure you are in the master branch and follow these steps:

a. Copy the script to a chosen location. If the location differs from the user home directory (~) please change the variable $scriptDir to the chosen path (use an absolute path). This variable is used for creating the script files (e.g. persistent history) in the given directory. Although not mandatory I strongly recommend to use same folder with the one where the script resides.
b. Configure .bashrc or .bash_profile to load the functions automatically (when opening a new terminal window) by using the source command.
c. Restart the terminal once ready and start using the functionality.

If you wish to use the move, copy and paste scripts (https://github.com/LiviuCP/ClipboardScripts) into the navigate mode please follow thse steps:

A. Pull the ClipboardScripts repository (see above link). Consult the README file provided in this repo for more details regarding installation and usage.
B. Clone the goto script, checkout the includeMoveCopyPaste branch and follow the steps a, b, c mentioned above.

II. On Linux/Windows

Same steps, however instead of the master branch use linuxMaster and instead of the includeMoveCopyPaste use linuxIncludeMoveCopyPaste.

4. KNOWN ISSUES/BUGS

1) When in navigation mode directories that contain spaces in their name cannot be accessed when entering the full directory name. For example if you have a directory called 'Test Test' you cannot access it by entering this name in the navigation mode.

A workaround would be entering a wildcard, like for example Te* (and without ' or " as these are interpreted literally by function).

However even with this workaround if you have directories that begin with the same letters there might still be issues. For example if you also have a 'Test' directory, if you enter Te* this directory will be the one accessed and not 'Test Test'. And as mentioned before, even if you enter 'Test T'* the directory 'Test Test' will still not be accessed as the expression will be split into 2 arguments ($1 is 'Test and $2 is T'*) and only the first one will be passed to the goToDir function.

The "healthy" workaround for the moment would be exiting the navigate mode and running the goToDir function directly with the directory name (either putting 'Test Test' as argument or using a wildcard). This will work and you will be able to access the target folder.

You can also prevent this issue by avoiding putting spaces in the directory names. I warmly recommend this approach. I also recommend that (unless specifically required) no special characters are used in a file or directory name. By this I mean characters other than: literals, numbers and underscore.

As soon as a fix is found to this bug I will update the repository accordingly so you can retrieve the corrected code. Sorry for any inconvenience!

2) When running the goto function there are cases when either the Finder window is not re-opened (in the new directory) or when the window is re-opened but inactive (it cannot be accessed when pressing CMD-TAB or when typing Finder in the Spotlight).

Workarounds available are:
- for the case when the window does not appear: run the goTo function again with argument '.' (current directory)
- for the case when the window is inactive: click with the mouse on the window

Currently I don't have any clue about how this bug can be fixed. If you have any ideas please feel free to share! Thank you.

3) It is currently not possible to use ~ in navigation mode for visiting the home directory.

However there is a much better alternative: just hit ENTER and you will
immediately be brought to the home directory.


If any other bugs are discovered please feel free to comment on my Github page or write me an e-mail (liviucst@gmail.com).

For bugs related to the move, copy and paste script please check the README file from the ClipboardScripts repo (https://github.com/LiviuCP/ClipboardScripts).

5. FUNCTIONALITY

Following features are contained in the script:
- a function used for navigating through directories: goToDir
- a function used for accessing the history or favorites menu: goToMenu
- a function used for going to the previously visited directory: goToPrevDir
- a function used for adding a directory to favorites: addToFavorites
- a function used for removing a directory from favorites: removeFromFavorites
- a function used for navigating through directories in an interactive way: navigate

5.1. The goto functionality

Enter the function name followed by the path of the directory you wish to visit.

You can enter:
- absolute paths
- relative paths
- paths with wildcards

If no argument is entered the user home directory will be visited. If not in navigation mode it is also possible to use ~ as argument with the goto function to visit the home folder.

5.2. The history and favorites menus

For entering the history menu please add option -f when running the goToMenu function.

The history menu keeps track of the:
- recently visited directories (up to 5 entries)
- most visited directories which are sorted in reverse order (up to 20 entries)

The favorites menu contains the directories the user previously added to the list of preferred directories. It is not limited in number of entries, however it's recommended to use it for storing the so called entry-point directories (like Desktop, Pictures, Documents, etc) or dirs that are visited on a very frequent basis.

When in the menus, you can toggle between history and favorites by entering t and hitting RETURN.

When choosing an entry (enter the number) from one of the two menus the directory is automatically visited by running the goto function.

For entering the favorites menu please add option -f when running the menu function.

5.3. Visiting the previous directory

This is done by running the goToPrevDir function. You can run it as many times as you wish. The system will toggle between the two directories.

Note: if previously running the goto function with argument . the goToPrevDir function will re-visit the current directory.

5.4. Adding a directory to favorites

This function can be run in two ways:
- without any argument: the current directory is added to favorites if not already there
- with an argument which is the path of the directory to be added (relative, absolute or paths with wildcards are allowed)

5.5. Removing a directory from favorites

Simply run the removeFromFavorites function without any arguments. A menu will be opened. Choose the entry number of the directory to be removed from favorites.

5.6. Navigation functionality

This is my favorite. When running this function a navigation mode will be opened. This mode practically combines the above functions in a unified interface which is kept open until the user decides to quit.

You can:
- visit directories by directly entering the path (same rules as above) without any function name (wildcards can be used) and hitting RETURN/ENTER
  - for visiting parent directory enter ..
  - if entering . the current directory will be re-opened (no history update)
  - hit ENTER and the home directory will become the current directory
- add/remove directories to/from favorites (you can only add the current directory to favorites in this mode)
  - enter keyword :a for adding
  - enter keyword :r for entering the remove menu
- go to previously visited directory
  - enter keyword :p
- enter the history/favorites menus
  - enter keyword :h for history
  - enter keyword :f for favorites
- run any other command that you would enter when not in navigation mode: mkdir, ls, pwd, script aliases etc.
  - enter keyword : and hit ENTER (command mode is entered)
- run any other command by editing the text of the last successful command
  - enter keyword ::
  - this option is only available for BASH 4 (locked for BASH 3, an error message will be output)
- run the last command which had been successfully executed (when using option ':')
  - enter keyword :cmd and hit ENTER
- show the last command which had been successfully executed (when using option ':')
  - enter keyword :scmd and hit ENTER
- use the move, copy and paste functionality
  - enter keyword :m for move
  - enter keyword :c for copy
  - enter keyword :pst for paste

The last feature is available if you pulled the code from branches includeMoveCopyPaste and linuxIncludeMoveCopyPaste. However you can still use this functionality from master (or linuxMaster) branch if you installed the ClipboardScripts as indicated in Step 3. What you need to do is:
- enter the command mode by entering character ':' and hitting RETURN (ENTER)
- enter the move/copy/paste command that you would otherwise enter when not in navigation mode and press ENTER

I recommend that you use the includeMoveCopyPaste (or linuxIncludeMoveCopyPaste) branch due to the fact that it comes easier to use the move/copy/paste scripts (less clicks needed).

Also the last feature is available in interactive mode only meaning that the user will be prompted when overriding existing files. Use command mode (:) and enter the move/copy/paste commands if a different behavior is desired.

All possible options can be viewed by entering :help in navigation mode.

Important note: when using the : option for entering command mode on a Linux OS make sure you launch non-CLI jobs in the background by using the ampersand (&). Not using ampersand for this type of jobs might cause unexpected behavior and/or closing of navigation mode.

An example would be launching emacs (GUI version) for opening a document. In detail:
- in navigation mode type ':' and hit RETURN
- write emacs [document_name] & and hit RETURN

The same can be applied for terminal jobs that take longer to execute so you
can continue to use navigation mode while the job runs.

6. THE HISTORY FUNCTIONALITY

Each time a directory is visited, the event is tracked in a history file. There are four files where this tracking is done:
- the recent history file
- the persistent history file
- the consolidated history file
- the excluded history file

6.1. Recent history

Most recently visited directory paths are mentioned here.

6.2. Persistent history

All paths except the ones from excluded history are mentioned here along with the number of visits. When a new directory is visited the first time on the current day the number of visits is incremented. Further visits on the same day are not taken into account. This prevents "fake" reporting which might occur if a directory has been entered many times during a day and then remains unvisited for a long time.

Also if the previous directory is the same with the visited directory the persistent history is not updated.

The file is sorted each time it is updated and the most visited paths (up to 20) are added to a consolidated history file.

6.3. Consolidated history

This file consolidates the entries contained in the previous 2 files. A unified interface is provided to the user for accessing the history.

6.4. Excluded history

When a directory is added to favorites its entry from the persistent history file is added to this file. This way the number of visits continues to be tracked (same tracking mechanism as for persistent history) and in the same time the path is separated from consolidated history.

When the directory is removed from favorites the entry is moved back to persistent history with the actual number of visits.

If the directory hadn't been visited prior to adding to favorites an entry with 0 visits is created in the excluded history file.

7. HANDLING MISSING DIRECTORIES

It can happen that for an entry chosen from one of the 2 above mentioned menus the directory the path doesn't exist anymore. This can happen for certain reasons:
- the directory has been deleted
- the directory has been moved, renamed or a combination of both

In this case the user has two options:
- remove the entry from the menus
- remap the path to an existing one (for example when the directory has been renamed) to preserve the number of visits

7.1. Removing the path

When this option is chosen the path is removed from all menus and files. The number of visits is lost.

7.2. Remapping

If the user chooses to remap the path to an existing one, he has two options:
- remap to a path that is not contained in favorites or consolidated history. In this case the path is replaced in the menus with the new path and the number of visits is kept.
- remap to a path that already exists in the menus. In this situation, the no more existing path is removed from the menus. The number of visits of the replacing path is updated only if the removed path had a greater number. For example if the removed path had 5 visits and the replacing path has 2 visits the the number of visits of the replacing path will be updated to 5.

8. MISCELLANEOUS

It is possible to erase all entries from history, which means all history files are cleared. When this happens there are no more entries in the consolidated history menu and toggling between history and favorites is disabled. However the favorites menu retains its entries, yet the number of visits mentioned in excluded history is 0.

Type cMenu in either history or favorites menus and hit ENTER in order to clear all history.

Note: toggling between history and favorites menus is enabled only if both contain at least one entry.